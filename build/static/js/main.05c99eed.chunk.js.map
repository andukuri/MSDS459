{"version":3,"sources":["img/images.jpeg","bikeComp.tsx","appHeader.tsx","userAsk.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","query","gql","BikeComp","useQuery","loading","error","data","message","Table","striped","bordered","hover","variant","Bikes","map","brand","styles","StyleSheet","create","container","flex","image","justifyContent","text","color","fontSize","lineHeight","fontWeight","textAlign","backgroundColor","AppHeader","AppBar","position","ImageBackground","source","require","resizeMode","style","alt","Text","questionArray","question","options","property","questionId","UserAsk","useForm","defaultValues","category","category1","subcategory","suspension","frame","handleSubmit","register","control","navigate","useNavigate","padding","maxWidth","onSubmit","props","createPost","JSON","stringify","history","push","FormControl","component","FormLabel","rules","required","name","as","RadioGroup","option","FormControlLabel","value","split","Radio","label","type","httpLink","createHttpLink","uri","headers","useGETForQueries","client","ApolloClient","link","cache","InMemoryCache","addTypename","App","path","element","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.05c99eed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/images.4b638877.jpeg\";","import React from \"react\";\nimport {useQuery, gql} from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Table from 'react-bootstrap/Table';\n//import \n\ninterface Bike{\n  id: string;\n  brand: string;    \n  model: string;\n  category: string;\n  subcategory: string;\n  price: Float32List;\n  currency: string;\n  year: string;\n  frame: string;\n  wheels: string;\n  travelfront: string;\n  travelrear: string;\n  fork: string;\n  groupset: string;\n  suspension: string;\n  motor: string;\n  battery: string;\n  drivetrain: string;\n  brakes: string;\n  url: string;\n}\n\ninterface Model\n{\n  id: string;\n  category: string\n  bikes: Bike[];\n}\n\ninterface Subcategory\n{\n  id: string;\n  category: string\n  models: Model[];\n}\n\ninterface Category\n{\n  id: string;\n  category: string\n  subcategories: Subcategory[];\n}\n\ninterface Brand\n{\n  id: string;\n  brand: string;\n  categories:Category[]\n}\n\n\ninterface BrandInfo{\n  Brands:Brand[]\n}\n\n\ninterface BikesInfo{\n  Bikes:Bike[]\n}\n\n\n  const query = gql`\n  query GetBikes{\n    Bikes:olddefault__Bikes(first: 100) {\n      brand    \n      model\n      category\n      subcategory\n      price\n      currency\n      year\n      frame\n      wheels\n      travelfront\n      travelrear\n      fork\n      groupset\n      suspension\n      motor\n      battery\n      drivetrain\n      brakes\n    }\n  }\n`;\n\nconst allquery = gql`\nquery GetCategoryBikes($category:String, $subcategory:String, $frame:String, $suspension:String){\n  Brands:Brands\n  {\n    id\n    brand\n    categories(filter:{category:{eq:$category}}) {\n    id\n      category\n      subcategories(filter:{subcategory:{eq:$subcategory}}) { id\n                      subcategory\n                      models(first: 10) { id\n                                model\n                                year\n                                bikes(filter:{frame:{eq:$frame}, suspension:{eq:$suspension}}){ id\n                                          battery\n                                          brakes\n                                          currency\n                                          drivetrain\n                                          fork\n                                          frame\n                                          groupset\n                                          motor\n                                          price\n                                          suspension\n                                          travelfront\n                                          travelrear\n                                          wheels\n                                          url\n                                        }\n                              }\n                    }\n                } \n    }\n}\n`;\n\n\nconst gridCols=[\n    {key:'model', name:'Model'},\n    {key:'brand', name:'Brand'},\n    {key:'price', name:'Price'},\n    {key:'category', name:'Category'},\n    {key:'subcategory', name:'Subcategory'},\n]\n\n//export const bikeData = graphql(query);\nexport function BikeComp(){\n    const { loading, error, data } = useQuery<BikesInfo>(query);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error : {error.message}</p>;\n\n   /* return (\n      <div>{JSON.stringify(data)}</div>\n    );*/\n    return(\n      <Table striped bordered hover variant='dark'>\n         <thead>\n            <tr>\n              <th>#</th>\n              <th>Brand</th>\n            </tr>\n          </thead>\n          <tbody>\n           { \n              data.Bikes.map(({ brand }) => (\n                <tr>\n                  <td></td>\n                  <td>{brand}</td>\n                </tr>\n              ))};\n          </tbody>\n      </Table>\n    );\n  };\n\n","import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Text, StyleSheet, View, ImageBackground } from 'react-native';\nimport AppBar from \"@mui/material/AppBar\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  image: {\n    justifyContent: 'center',\n  },\n  text: {\n    color: 'white',\n    fontSize: 42,\n    lineHeight: 200,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    backgroundColor: '#000000c0',\n  },\n});\nexport function AppHeader(){    \n    return(\n       <AppBar position=\"static\">\n        <ImageBackground source={require('./img/images.jpeg')} resizeMode=\"cover\" style={styles.image} alt='Bikes'>\n            <Text style={styles.text}>Find your Bike!</Text>\n        </ImageBackground>\n        </AppBar>\n    );\n  };\n\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\n\nconst questionArray = [\n  {\n    question: \"What terrain will you be primarily riding on?\",\n    options: [\n      \"Tarmac:Road\",\n      \"Trails, Offroad:Mountain\",\n      \"Just around the neighborhood:Urban\"\n    ],\n    property:\"category\",\n    questionId: 1,\n  },\n  {\n    question: \"Would you like pedal assist?\",\n    options: [\"Yes:E-bike\", \"No:!E-bike\"],\n    property:\"category1\",\n    questionId: 2,\n  },\n  {\n    question: \"What is your intended use?\",\n    options: [\"Commuting:Commuter\",\n    \"Exploring smooth terrain:Road\",\n    \"Exploring rough terrain:Trail\",\n    \"Competing or Racing:Race\"],\n    property:\"subcategory\",\n    questionId: 3,\n  },\n  {\n    question: \"How bumpy, intense do you imagine your rides will be?\",\n    options: [\"Very Bumpy:Full\", \"Not Bumpy:Rigid\", \"Somewhat Bumpy:HardTail\"],\n    property:\"suspension\",\n    questionId: 4,\n  },\n  \n  {\n    question: \"Is weight an important factor?\",\n    options: [\"Yes:Carbon\", \"No:!Carbon\"],\n    property:\"frame\",\n    questionId: 5,\n  },\n];\n\n\nexport default function UserAsk() {\n  const { register, handleSubmit, control } = useForm({\n    defaultValues: {\n        category: '',\n        category1: '',\n        subcategory:'',\n        suspension:'',\n        frame:'',\n    },\n  });\n\n  const navigate = useNavigate();\n\n  //const onSubmit = (data) => alert(JSON.stringify(data, null, 2));\n  const onSubmit=(data) => {\n    this.props.createPost(JSON.stringify(data, null, 2), () => {\n      this.props.history.push('/');\n      navigate('/bikes');\n    });\n  }\n\n  return (\n    <div style={{ padding: 16, maxWidth: 600 }}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl component=\"fieldset\">\n                  {questionArray.map(\n                    ({ question, options, questionId, property }) => (\n                      <div>\n                        <FormLabel component=\"legend\">{question}</FormLabel>\n                        <Controller \n                        rules={{ required: true }}\n                        control={control}\n                        name={property}\n                          as={\n                            <RadioGroup>\n                              {options.map(option => (\n                                  <FormControlLabel\n                                      value={option.split(':')[1]}\n                                      control={<Radio />}\n                                      label={option.split(':')[0]}\n                                />\n                                ))};\n                            </RadioGroup>\n                          }\n                        />\n                        </div>\n                    ))};\n\n                  </FormControl>\n\n        <input type=\"submit\" />\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { BikeComp } from './bikeComp';\nimport { BrowserRouter as Router, Routes, Route }\n    from \"react-router-dom\";\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Text, StyleSheet, View, ImageBackground } from 'react-native';\nimport {  ApolloClient,\n  ApolloProvider, createHttpLink,  InMemoryCache} from \"@apollo/client\";\nimport { AppHeader } from './appHeader';\nimport UserAsk from './userAsk';\n\n  const httpLink = createHttpLink({\n    uri: \"/graphql\",\n    headers: {\n      'Content-Type': 'application/json'\n      },\n    useGETForQueries: true\n  });\n\n  //const win = Dimensions.get('window');\n  \n\n\n  const client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache({ addTypename: false })\n  });\n\nfunction App() {\n  return (\n    <>      \n      <AppHeader />\n      <Router>\n        <Routes>\n          <Route path=\"/bikes\" element={<BikeComp />}/>\n        </Routes>\n      </Router>\n      <ApolloProvider client={client}>              \n        <UserAsk />\n      </ApolloProvider>\n    </>\n  );  \n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}